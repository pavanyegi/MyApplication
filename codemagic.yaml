workflows:
  native-android:
    name: Native Android
    instance_type: windows_x2
    environment:
      # Android code signing - Add the keystore_credentials group environment variables in Codemagic UI (either in Application/Team variables)
      {
        keystore
        Rise@123
        Rise@123
        key0
      }
      vars:
        CM_KEYSTORE_PATH: /tmp/keystore.jks
        node: latest
    triggering:
      events:
        - push
        - tag
        - pull_request
      branch_patterns:
        - pattern: develop
          include: true
          source: true
    scripts:
      - name: AWS CLI configuration
        script: |
          mkdir ~/.aws
          cat >> ~/.aws/config <<EOF
          [default]
          aws_access_key_id=$AWS_ACCESS_KEY_ID
          aws_secret_access_key=$AWS_SECRET_ACCESS_KEY
          region=$AWS_DEFAULT_REGION
          output=json
          EOF
      - name: Set Android SDK location
        script: |
          echo "sdk.dir=$ANDROID_SDK_ROOT" > "$FCI_BUILD_DIR/local.properties"
      - name: Set up keystore
        script: |
          echo $CM_KEYSTORE | base64 --decode > /tmp/keystore.keystore
          # The following script creates key.properties file and stores the credentials in it. As we configure code signing in app/build.gradle file, the following part is unnecessary unless code signing is configured differently as explained in the documentation: https://docs.codemagic.io/flutter-code-signing/android-code-signing/
          # cat >> "$FCI_BUILD_DIR/key.properties" <<EOF
          # storePassword=$CM_KEYSTORE_PASSWORD
          # keyPassword=$CM_KEY_ALIAS_PASSWORD
          # keyAlias=$CM_KEY_ALIAS_USERNAME
          # storeFile=/tmp/keystore.keystore
          # EOF
      - name: Build Android debug APK
        script: |
          ./gradlew assembleDebug
      - name: Build Android test APK
        script: |
          ./gradlew assembleAndroidTest
      - name: Run AWS Device Farm test
        script: |
          cd .scripts && ./run_aws_espresso.sh
      - name: Verify Device Farm test
        script: |
          set -e
          set -x
          export AWS_RESULT=$(cat $FCI_BUILD_DIR/.scripts/test-result.json | jq -r '.run.result')
          if [ $AWS_RESULT != "PASSED" ]
          then
            echo "AWS tests did not pass, the result was $AWS_RESULT"
            exit 1
          else
            echo "AWS tests PASSED!"
          fi
      - name: Build Android production release
        script: |
          ./gradlew assembleRelease
    artifacts:
      - app/build/outputs/**/*.apk
    publishing:
      email:
        recipients:
          - pavan.yegi@gmail.com
          - pavan.y@prostem.org
        notify:
          success: true
          failure: false
      #pavangoogle_play:                          # For publishing your Android app to Google Play
       #pavan credentials: $GCLOUD_SERVICE_ACCOUNT_CREDENTIALS
       #pavan track: alpha                      # Name of the track: internal, alpha, beta, production









